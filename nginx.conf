user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Глобальная конфигурация healthcheck
    healthcheck fall=3 rise=2 interval=10 timeout=5000 type=http;

    # Upstream с тестовыми Tomcat серверами
    upstream tomcat_backend {
        zone tomcat_zone 64k;
        
        # Tomcat серверы - будут созданы в docker-compose
        server tomcat1:8080 max_fails=0;
        server tomcat2:8080 max_fails=0;
        server tomcat3:8080 max_fails=0;

        # Настройка проверок здоровья для HTTP
        check fall=2 rise=1 interval=5 timeout=3000 type=http;
        check_request_uri GET /;
        check_response_codes 200 404;
    }

    # Upstream с TCP проверками
    upstream tcp_backend {
        zone tcp_zone 64k;
        
        server tomcat1:8080 max_fails=0;
        server tomcat2:8080 max_fails=0;

        # TCP проверки
        check fall=3 rise=2 interval=10 timeout=2000 type=tcp;
    }

    # Основной виртуальный хост
    server {
        listen 80;
        server_name localhost;

        # Главная страница с информацией о балансировщике
        location / {
            return 200 '<html><body>
                <h1>Nginx с модулем Dynamic Healthcheck</h1>
                <p><a href="/app/">Приложение (балансировка HTTP)</a></p>
                <p><a href="/tcp/">TCP приложение</a></p>
                <p><a href="/healthcheck/status">Статус healthcheck</a></p>
                <p><a href="/healthcheck/status?format=json">Статус JSON</a></p>
                </body></html>';
            add_header Content-Type text/html;
        }

        # Проксирование на Tomcat серверы с HTTP проверками
        location /app/ {
            proxy_pass http://tomcat_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Проксирование на TCP backend
        location /tcp/ {
            proxy_pass http://tcp_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # API для просмотра статуса healthcheck
        location /healthcheck/status {
            access_log off;
            allow all;
            
            healthcheck_status;
        }

        # API для управления healthcheck
        location /healthcheck/update {
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
            
            healthcheck_update;
        }

        # Страница ошибки при недоступности backend
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # Административный интерфейс для healthcheck (опционально)
    server {
        listen 8081;
        server_name localhost;

        location / {
            return 200 '<html><body>
                <h1>Админ-панель Healthcheck</h1>
                <p><a href="/status">Статус всех upstream</a></p>
                <p><a href="/status?format=json">JSON статус</a></p>
                </body></html>';
            add_header Content-Type text/html;
        }

        location /status {
            healthcheck_status;
        }

        location /update {
            allow 127.0.0.1;
            allow 172.16.0.0/12;
            deny all;
            healthcheck_update;
        }
    }
}
