#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ dynamic healthcheck

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO: $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
}

test_result() {
    echo -e "${CYAN}[$(date +'%H:%M:%S')] TEST: $1${NC}"
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NGINX_HOST="localhost"
NGINX_PORT="80"
HEALTHCHECK_URL="http://${NGINX_HOST}:${NGINX_PORT}/healthcheck/status"
APP_URL="http://${NGINX_HOST}:${NGINX_PORT}/app/"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ nginx
check_nginx_availability() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ nginx..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$NGINX_HOST:$NGINX_PORT" > /dev/null 2>&1; then
            log "‚úÖ Nginx –¥–æ—Å—Ç—É–ø–µ–Ω"
            return 0
        fi
        
        warn "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ..."
        sleep 2
        ((attempt++))
    done
    
    error "‚ùå Nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    return 1
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ healthcheck
get_healthcheck_status() {
    log "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ healthcheck..."
    
    local response
    response=$(curl -s "$HEALTHCHECK_URL" 2>/dev/null || echo "ERROR")
    
    if [ "$response" = "ERROR" ]; then
        error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å healthcheck"
        return 1
    fi
    
    echo "$response"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ JSON —Å—Ç–∞—Ç—É—Å–∞ healthcheck
get_healthcheck_json() {
    log "–ü–æ–ª—É—á–µ–Ω–∏–µ JSON —Å—Ç–∞—Ç—É—Å–∞ healthcheck..."
    
    local response
    response=$(curl -s "${HEALTHCHECK_URL}?format=json" 2>/dev/null || echo "ERROR")
    
    if [ "$response" = "ERROR" ]; then
        error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JSON —Å—Ç–∞—Ç—É—Å"
        return 1
    fi
    
    echo "$response"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
test_load_balancing() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏..."
    
    local requests=10
    local server_counts=()
    
    info "–û—Ç–ø—Ä–∞–≤–∫–∞ $requests –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é..."
    
    for i in $(seq 1 $requests); do
        local response
        response=$(curl -s "$APP_URL" 2>/dev/null || echo "ERROR")
        
        if [[ "$response" =~ "Tomcat Server 1" ]]; then
            ((server_counts[1]++)) || server_counts[1]=1
        elif [[ "$response" =~ "Tomcat Server 2" ]]; then
            ((server_counts[2]++)) || server_counts[2]=1
        elif [[ "$response" =~ "Tomcat Server 3" ]]; then
            ((server_counts[3]++)) || server_counts[3]=1
        else
            warn "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
        fi
        
        sleep 0.5
    done
    
    test_result "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:"
    test_result "  - Tomcat Server 1: ${server_counts[1]:-0} –∑–∞–ø—Ä–æ—Å–æ–≤"
    test_result "  - Tomcat Server 2: ${server_counts[2]:-0} –∑–∞–ø—Ä–æ—Å–æ–≤"
    test_result "  - Tomcat Server 3: ${server_counts[3]:-0} –∑–∞–ø—Ä–æ—Å–æ–≤"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
test_failover() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏..."
    
    info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ tomcat2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ failover..."
    docker-compose stop tomcat2
    
    sleep 10
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
    get_healthcheck_status
    
    info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
    test_load_balancing
    
    info "–ó–∞–ø—É—Å–∫ tomcat2 –æ–±—Ä–∞—Ç–Ω–æ..."
    docker-compose start tomcat2
    
    sleep 15
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞..."
    get_healthcheck_status
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
test_endpoints() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
    
    local endpoints=(
        "/"
        "/app/"
        "/healthcheck/status"
        "/tcp/"
    )
    
    for endpoint in "${endpoints[@]}"; do
        info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: $endpoint"
        
        local status_code
        status_code=$(curl -s -w "%{http_code}" -o /dev/null "http://${NGINX_HOST}:${NGINX_PORT}${endpoint}")
        
        if [ "$status_code" -eq 200 ]; then
            test_result "  ‚úÖ $endpoint: HTTP $status_code"
        else
            test_result "  ‚ùå $endpoint: HTTP $status_code"
        fi
    done
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ healthcheck –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_healthcheck() {
    log "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ healthcheck (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)..."
    
    while true; do
        clear
        echo -e "${CYAN}=== –ú–û–ù–ò–¢–û–†–ò–ù–ì HEALTHCHECK ===${NC}"
        echo -e "${CYAN}–í—Ä–µ–º—è: $(date)${NC}"
        echo ""
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        local status
        status=$(get_healthcheck_status 2>/dev/null || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
        
        echo -e "${BLUE}–°—Ç–∞—Ç—É—Å healthcheck:${NC}"
        echo "$status"
        echo ""
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        echo -e "${BLUE}–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
        docker-compose ps | grep -E "(nginx-healthcheck|tomcat)"
        echo ""
        
        sleep 5
    done
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${BLUE}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]${NC}"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  status      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å healthcheck"
    echo "  json        - –ü–æ–ª—É—á–∏—Ç—å JSON —Å—Ç–∞—Ç—É—Å"
    echo "  balance     - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏"
    echo "  failover    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"
    echo "  endpoints   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"
    echo "  monitor     - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  full        - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 status"
    echo "  $0 full"
    echo "  $0 monitor"
}

# –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
full_test() {
    log "üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è healthcheck —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"
    
    check_nginx_availability || exit 1
    
    echo ""
    get_healthcheck_status
    echo ""
    
    test_endpoints
    echo ""
    
    test_load_balancing
    echo ""
    
    test_failover
    echo ""
    
    log "üéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-full}" in
        "status")
            check_nginx_availability && get_healthcheck_status
            ;;
        "json")
            check_nginx_availability && get_healthcheck_json
            ;;
        "balance")
            check_nginx_availability && test_load_balancing
            ;;
        "failover")
            check_nginx_availability && test_failover
            ;;
        "endpoints")
            check_nginx_availability && test_endpoints
            ;;
        "monitor")
            check_nginx_availability && monitor_healthcheck
            ;;
        "full")
            full_test
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            show_help
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo -e "\n${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ${NC}"; exit 0' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
